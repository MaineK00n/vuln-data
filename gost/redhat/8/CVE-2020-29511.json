{
  "ThreatSeverity": "Low",
  "PublicDate": "2020-12-14T00:00:00Z",
  "Bugzilla": {
    "description": "CVE-2020-29511 go: encoding/xml: XML element instability",
    "id": "1908549",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1908549"
  },
  "Cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "Cvss3": {
    "cvss3_base_score": "5.6",
    "cvss3_scoring_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "status": "draft"
  },
  "Iava": "",
  "Cwe": "CWE-115",
  "Statement": "All uses of xml/encoding package in OpenShift Container Platform, OpenShift Jaeger,  OpenShift Service Mesh (OSSM), OpenShift Virtualization and OpenShift Container Storage do not rely on XML stability. We have assigned CVE-2020-27846 for crewjam/saml, and CVE-2020-27847 for dexidp/dex Go modules which are known to use encoding/xml in an unsafe way.\nAs it is unlikely for there to be any fix for this issue in Go's encoding/xml library, and the library should not be relied upon for security-sensitive protocols such as SAML and XML-DSig, there is currently no plan to fix this in golang as shipped in Red Hat Enterprise Linux 7, 8, or Red Hat Developer Tools.",
  "Acknowledgement": "",
  "Mitigation": "While there is unlikely to be any fix for this issue Go's encoding/xml library affected users can workaround the vulnerability by using Mattermost's xml-roundtrip-validator [1].\n[1] https://github.com/mattermost/xml-roundtrip-validator",
  "AffectedRelease": [],
  "PackageState": [
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Will not fix",
      "package_name": "go-toolset:rhel8/golang",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    }
  ],
  "Name": "CVE-2020-29511",
  "DocumentDistribution": "",
  "Details": [
    {
      "Detail": "The encoding/xml package in Go (all versions) does not correctly preserve the semantics of element namespace prefixes during tokenization round-trips, which allows an attacker to craft inputs that behave in conflicting ways during different stages of processing in affected downstream applications."
    },
    {
      "Detail": "A flaw was found in go. Encoding and decoding of XML elements could lead to changes in the observed integrity. An attacker could use this flaw to trick applications which rely on element integrity for security decisions to make those decisions incorrectly. Known vulnerability use-cases are SAML and XML-DSig."
    }
  ],
  "References": [
    {
      "Reference": "https://github.com/mattermost/xml-roundtrip-validator/blob/master/advisories/unstable-elements.md\nhttps://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/"
    }
  ]
}
