{
  "ThreatSeverity": "Important",
  "PublicDate": "2018-01-29T00:00:00Z",
  "Bugzilla": {
    "description": "CVE-2018-1199 spring-framework: Improper URL path validation allows for bypassing of security checks on static resources",
    "id": "1540030",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1540030"
  },
  "Cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "Cvss3": {
    "cvss3_base_score": "7.5",
    "cvss3_scoring_vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "status": "verified"
  },
  "Iava": "",
  "Cwe": "CWE-20",
  "Statement": "",
  "Acknowledgement": "",
  "Mitigation": "As a general precaution, users are encouraged to separate public and private resources. For example, separating static resources and mapping them to /resources/public/** and /resources/private/** is preferred to having one common root with mixed public and private resource content underneath.",
  "AffectedRelease": [
    {
      "product_name": "Red Hat JBoss Fuse 6.3",
      "release_date": "2018-08-14T00:00:00Z",
      "advisory": "RHSA-2018:2405",
      "package": "",
      "cpe": "cpe:/a:redhat:jboss_fuse:6.3"
    }
  ],
  "PackageState": [
    {
      "product_name": "Red Hat Enterprise Linux 8",
      "fix_state": "Not affected",
      "package_name": "springframework",
      "cpe": "cpe:/o:redhat:enterprise_linux:8"
    }
  ],
  "Name": "CVE-2018-1199",
  "DocumentDistribution": "",
  "Details": [
    {
      "Detail": "Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed."
    }
  ],
  "References": [
    {
      "Reference": "https://pivotal.io/security/cve-2018-1199"
    }
  ]
}
