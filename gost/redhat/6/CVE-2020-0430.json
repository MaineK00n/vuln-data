{
  "ThreatSeverity": "Moderate",
  "PublicDate": "2020-09-08T00:00:00Z",
  "Bugzilla": {
    "description": "CVE-2020-0430 kernel: possible out-of-bounds read in skb_headlen of /include/linux/skbuff.h",
    "id": "2003224",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2003224"
  },
  "Cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "Cvss3": {
    "cvss3_base_score": "7.8",
    "cvss3_scoring_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "status": "draft"
  },
  "Iava": "",
  "Cwe": "CWE-125",
  "Statement": "",
  "Acknowledgement": "",
  "Mitigation": "The default Red Hat Enterprise Linux kernel prevents unprivileged users from being able to use eBPF by the kernel.unprivileged_bpf_disabled sysctl. This would require a privileged user with CAP_SYS_ADMIN or root to be able to abuse this flaw reducing its attack space.\nFor the Red Hat Enterprise Linux 7 the eBPF for unprivileged users is always disabled.\nFor the Red Hat Enterprise Linux 8 to confirm the current state, inspect the sysctl with the command:\n# cat /proc/sys/kernel/unprivileged_bpf_disabled\nThe setting of 1 would mean that unprivileged users can not use eBPF.",
  "AffectedRelease": [],
  "PackageState": [
    {
      "product_name": "Red Hat Enterprise Linux 6",
      "fix_state": "Not affected",
      "package_name": "kernel",
      "cpe": "cpe:/o:redhat:enterprise_linux:6"
    }
  ],
  "Name": "CVE-2020-0430",
  "DocumentDistribution": "",
  "Details": [
    {
      "Detail": "In skb_headlen of /include/linux/skbuff.h, there is a possible out of bounds read due to memory corruption. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-153881554"
    },
    {
      "Detail": "An out of bounds memory read flaw was found in the Linux kernelâ€™s implementation of the eBPF code verifier. A user passing corrupted data to a helper function could access data inside the adjust_ptr_min_max_vals() function. By default, the eBPF verifier is only accessible to users with CAP_SYS_ADMIN privileges. The lack of proper validation of user-supplied eBPF programs prior to execution is the cause of this issue which could lead to a local user's ability to crash the system or possibly escalate their privileges on the system."
    }
  ],
  "References": [
    {
      "Reference": "https://android.googlesource.com/kernel/common/+/7fed98f4%5E%21/#F0"
    }
  ]
}
