{
  "public_data_at_usn": "2018-04-18T00:00:00Z",
  "crd": "0001-01-01T00:00:00Z",
  "candidate": "CVE-2018-2794",
  "public_date": "2018-04-19T02:29:00Z",
  "references": [
    {
      "reference": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-2794"
    },
    {
      "reference": "http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html"
    },
    {
      "reference": "http://www.oracle.com/technetwork/java/javase/8u171-relnotes-4308888.html"
    },
    {
      "reference": "https://ubuntu.com/security/notices/USN-3644-1"
    },
    {
      "reference": "https://ubuntu.com/security/notices/USN-3691-1"
    }
  ],
  "description": "Vulnerability in the Java SE, JRockit component of Oracle Java SE (subcomponent: Security). Supported versions that are affected are Java SE: 6u181, 7u171, 8u162, 10 and JRockit: R28.3.17. Difficult to exploit vulnerability allows unauthenticated attacker with logon to the infrastructure where Java SE, JRockit executes to compromise Java SE, JRockit. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, JRockit, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of Java SE, JRockit. Note: Applies to client and server deployment of Java. This vulnerability can be exploited through sandboxed Java Web Start applications and sandboxed Java applets. It can also be exploited by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 7.7 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H).",
  "ubuntu_description": "Francesco Palmarini, Marco Squarcina, Mauro Tempesta, and Riccardo Focardi discovered that the Security component of OpenJDK did not restrict which classes could be used when deserializing keys from the JCEKS key stores. An attacker could use this to specially craft a JCEKS key store to execute arbitrary code.",
  "notes": [
    {
      "note": "sbeattie\u003e Oracle release notes on this issue: Enhanced KeyStore Mechanisms  A new security property named jceks.key.serialFilter has been introduced. If this filter is configured, the JCEKS KeyStore uses it during the deserialization of the encrypted Key object stored inside a SecretKeyEntry. If it is not configured or if the filter result is UNDECIDED (for example, none of the patterns match), then the filter configured by jdk.serialFilter is consulted.  If the system property jceks.key.serialFilter is also supplied, it supersedes the security property value defined here.  The filter pattern uses the same format as jdk.serialFilter. The default pattern allows java.lang.Enum, java.security.KeyRep, java.security.KeyRep$Type, and javax.crypto.spec.SecretKeySpec but rejects all the others.  Customers storing a SecretKey that does not serialize to the above types must modify the filter to make the key extractable."
    }
  ],
  "bugs": [],
  "priority": "medium",
  "discovered_by": "Francesco Palmarini, Marco Squarcina, Mauro Tempesta, Riccardo Focardi",
  "assigned_to": "",
  "patches": [
    {
      "package_name": "openjdk-7",
      "release_patches": [
        {
          "release_name": "xenial",
          "status": "DNE",
          "note": ""
        }
      ]
    },
    {
      "package_name": "openjdk-8",
      "release_patches": [
        {
          "release_name": "xenial",
          "status": "released",
          "note": "8u171-b11-0ubuntu0.16.04.1"
        }
      ]
    },
    {
      "package_name": "openjdk-6",
      "release_patches": [
        {
          "release_name": "xenial",
          "status": "DNE",
          "note": ""
        }
      ]
    }
  ],
  "upstreams": []
}
